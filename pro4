[5:14 am, 26/4/2025] Nisha: #include <stdio.h>
#include <stdbool.h>
#define V 6 // Number of vertices in the graph
#define INF 99999 // Infinity value for representing infinite distance
// Function to find the vertex with the minimum distance value, from the set of vertices
// not yet included in the shortest path tree
int minDistance(int dist[], bool sptSet[]) {
 int min = INF, min_index;
 for (int v = 0; v < V; v++) {
 if (sptSet[v] == false && dist[v] <= min) {
 min = dist[v];
 min_index = v;
 }
 }
 return min_index;
}
// Function to print the constructed distance array
void printSolution(int dist[], int src) {
 printf("Vertex Distance from Source %d\n", src);
 for (int i = 0; i < V; i++)
 printf("%d \t\t %d\n", i, dist[i]);
}
// Function to implement Dijkstra's algorithm for a given graph
void dijkstra(int graph[V][V], int src) {
 int dist[V]; // Array to store the shortest distance from src to i
 bool sptSet[V]; // sptSet[i] will be true if vertex i is included in the shortest path tree
 // Initialize all distances as INFINITE and sptSet[] as false
 for (int i = 0; i < V; i++) {
 dist[i] = INF;
 sptSet[i] = false;
[5:15 am, 26/4/2025] Nisha: }
 // Distance of source vertex from itself is always 0
 dist[src] = 0;
 // Find shortest path for all vertices
 for (int count = 0; count < V - 1; count++) {
 // Pick the minimum distance vertex from the set of vertices not yet processed
 int u = minDistance(dist, sptSet);
 // Mark the picked vertex as processed
 sptSet[u] = true;
 // Update dist value of the adjacent vertices of the picked vertex
 for (int v = 0; v < V; v++) {
 // Update dist[v] only if it's not in sptSet, there is an edge from u to v,
 // and total weight of path from src to v through u is smaller than current value of dist[v]
 if (!sptSet[v] && graph[u][v] && dist[u] != INF && dist[u] + graph[u][v] < dist[v])
 dist[v] = dist[u] + graph[u][v];
 }
 }
 // Print the constructed distance array
 printSolution(dist, src);
}
int main() {
 // Given graph in adjacency matrix representation
 int graph[V][V] = {
 {0, 4, 0, 0, 0, 0},
 {4, 0, 8, 0, 0, 0},
 {0, 8, 0, 7, 0, 4},
 {0, 0, 7, 0, 9, 14},
 {0, 0, 0, 9, 0, 10},
 {0, 0, 4, 14, 10, 0}
 };
 int src = 0; // Source vertex
 printf("Shortest paths from vertex %d:\n", src);
 dijkstra(graph, src);
 return 0;
 }





OUTPUT
Shortest paths from vertex 0:
Vertex Distance from Source 0
0 0
1 4
2 12
3 19
4 26
5 16
